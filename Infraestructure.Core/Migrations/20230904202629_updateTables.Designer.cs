// <auto-generated />
using System;
using Infraestructure.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Core.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230904202629_updateTables")]
    partial class updateTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Infraestructure.Entity.Models.General.CountryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Country", "General");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Logistic.ClientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("IdCountry")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.ToTable("Client", "Logistic");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Logistic.LandLotEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GuideNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeProduct")
                        .HasColumnType("int");

                    b.Property<int>("IdWarehouse")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VehiclePlate")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdTypeProduct");

                    b.HasIndex("IdWarehouse");

                    b.ToTable("LandLot", "Logistic");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Logistic.MaritimeLotEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FleetNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("GuideNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<int>("IdSeaport")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeProduct")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdSeaport");

                    b.HasIndex("IdTypeProduct");

                    b.ToTable("MaritimeLot", "Logistic");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Logistic.SeaportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdCountry")
                        .HasColumnType("int");

                    b.Property<string>("Seaport")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.ToTable("Seaports", "Logistic");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Logistic.TypeProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TypeProduct")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TypeProduct", "Logistic");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Logistic.WarehouseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdCountry")
                        .HasColumnType("int");

                    b.Property<string>("Warehouse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.ToTable("Warehouses", "Logistic");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Security.PermissionEntity", b =>
                {
                    b.Property<int>("IdPermission")
                        .HasColumnType("int");

                    b.Property<string>("Ambit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdPermission");

                    b.ToTable("Permission", "Security");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Security.RolEntity", b =>
                {
                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdRol");

                    b.ToTable("Rol", "Security");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Security.RolesPermissionsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdPermission")
                        .HasColumnType("int");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPermission");

                    b.HasIndex("IdRol");

                    b.ToTable("RolesPermissions", "Security");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Security.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdRol");

                    b.ToTable("User", "Security");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Logistic.ClientEntity", b =>
                {
                    b.HasOne("Infraestructure.Entity.Models.General.CountryEntity", "CountryEntity")
                        .WithMany("ClientEntities")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryEntity");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Logistic.LandLotEntity", b =>
                {
                    b.HasOne("Infraestructure.Entity.Models.Logistic.ClientEntity", "ClientEntity")
                        .WithMany("LandLotEntities")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infraestructure.Entity.Models.Logistic.TypeProductEntity", "TypeProductEntity")
                        .WithMany("LandLotEntities")
                        .HasForeignKey("IdTypeProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infraestructure.Entity.Models.Logistic.WarehouseEntity", "WarehouseEntity")
                        .WithMany("LandLotEntities")
                        .HasForeignKey("IdWarehouse")
                        .IsRequired()
                        .HasConstraintName("LandLotEntity_xx_constraint");

                    b.Navigation("ClientEntity");

                    b.Navigation("TypeProductEntity");

                    b.Navigation("WarehouseEntity");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Logistic.MaritimeLotEntity", b =>
                {
                    b.HasOne("Infraestructure.Entity.Models.Logistic.ClientEntity", "ClientEntity")
                        .WithMany("MaritimeLotEntities")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infraestructure.Entity.Models.Logistic.SeaportEntity", "SeaportEntity")
                        .WithMany("MaritimeLotEntities")
                        .HasForeignKey("IdSeaport")
                        .IsRequired()
                        .HasConstraintName("MaritimeLotEntity_xx_constraint");

                    b.HasOne("Infraestructure.Entity.Models.Logistic.TypeProductEntity", "TypeProductEntity")
                        .WithMany("MaritimeLotEntities")
                        .HasForeignKey("IdTypeProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientEntity");

                    b.Navigation("SeaportEntity");

                    b.Navigation("TypeProductEntity");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Logistic.SeaportEntity", b =>
                {
                    b.HasOne("Infraestructure.Entity.Models.General.CountryEntity", "CountryEntity")
                        .WithMany("SeaportEntities")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryEntity");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Logistic.WarehouseEntity", b =>
                {
                    b.HasOne("Infraestructure.Entity.Models.General.CountryEntity", "CountryEntity")
                        .WithMany("WarehouseEntities")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryEntity");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Security.RolesPermissionsEntity", b =>
                {
                    b.HasOne("Infraestructure.Entity.Models.Security.PermissionEntity", "PermissionEntity")
                        .WithMany("RolesPermissionsEntities")
                        .HasForeignKey("IdPermission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infraestructure.Entity.Models.Security.RolEntity", "RolEntity")
                        .WithMany("RolesPermissionsEntities")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionEntity");

                    b.Navigation("RolEntity");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Security.UserEntity", b =>
                {
                    b.HasOne("Infraestructure.Entity.Models.Security.RolEntity", "RolEntity")
                        .WithMany("UserEntities")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RolEntity");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.General.CountryEntity", b =>
                {
                    b.Navigation("ClientEntities");

                    b.Navigation("SeaportEntities");

                    b.Navigation("WarehouseEntities");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Logistic.ClientEntity", b =>
                {
                    b.Navigation("LandLotEntities");

                    b.Navigation("MaritimeLotEntities");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Logistic.SeaportEntity", b =>
                {
                    b.Navigation("MaritimeLotEntities");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Logistic.TypeProductEntity", b =>
                {
                    b.Navigation("LandLotEntities");

                    b.Navigation("MaritimeLotEntities");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Logistic.WarehouseEntity", b =>
                {
                    b.Navigation("LandLotEntities");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Security.PermissionEntity", b =>
                {
                    b.Navigation("RolesPermissionsEntities");
                });

            modelBuilder.Entity("Infraestructure.Entity.Models.Security.RolEntity", b =>
                {
                    b.Navigation("RolesPermissionsEntities");

                    b.Navigation("UserEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
